name: Auto-Add Issues to User Project

on:
  issues:
    types:
      - assigned
      - unassigned

jobs:
  add-to-project:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repo
      uses: actions/checkout@v3

    - name: Get user from issue
      id: get_user
      run: |
        echo "::set-output name=user::$(jq --raw-output .issue.assignee.login $GITHUB_EVENT_PATH)"
        
    - name: Check if assignee is set
      run: |
        if [ -z "${{ steps.get_user.outputs.user }}" ]; then
          echo "No user assigned to the issue. Skipping project update."
          exit 0
        fi

    - name: Add Issue to User's Project Board
      env:
        GITHUB_TOKEN: ${{ secrets.PROJECT_ISSUES_PAT }}
      run: |
        USER=${{ steps.get_user.outputs.user }}
        REPO=${{ github.repository }}
        ISSUE_NUMBER=$(jq --raw-output .issue.number $GITHUB_EVENT_PATH)
        
        # Organization name where projects are hosted
        ORG_NAME="lmu-osc"
        
        # Construct the project name dynamically based on the user
        PROJECT_NAME="${USER}'s Tasks"
        
        echo "Looking for project: $PROJECT_NAME"
        
        # Define the GraphQL query to retrieve the project ID
        QUERY="{\"query\": \"query { organization(login: \\\"$ORG_NAME\\\") {projectsV2(first: 20) {nodes {id title}}}}\"}"

        # Send the GraphQL query to GitHub API and parse the response
        PROJECT_ID=$(curl -s \
          -H "Authorization: bearer $GITHUB_TOKEN" \
          -X POST \
          -d "$QUERY" \
          "https://api.github.com/graphql" | \
          jq -r --arg PROJECT_NAME "$PROJECT_NAME" '.data.organization.projectsV2.nodes[] | select(.title == $PROJECT_NAME) | .id')

        echo "Project ID: $PROJECT_ID"

        # Check if project exists
        if [ "$PROJECT_ID" == "null" ]; then
          echo "Project '$PROJECT_NAME' not found. Exiting."
          exit 1
        fi

        # Check some other misc. info
        REPO_INFO=$(echo $GITHUB_REPOSITORY)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)

        echo "Here's some additional info: Issue number: $ISSUE_NUMBER; the repo name: $REPO_NAME; the general repo info: $REPO_INFO"

        # Try to get Node ID for issue
        NODE_ID_RESULTS=$(curl -X POST \
          -H "Authorization: bearer $GITHUB_TOKEN" \
          -d '{"query": "query { repository(owner: \\\"$REPO_OWNER\\\", name: \\\"$REPO_NAME\\\") { issue(number: $ISSUE_NUMBER) { id } } }"}' \
          https://api.github.com/graphql | jq -r '.data.repository.issue.id')

        echo "The results of getting the node ID are: $NODE_ID_RESULTS"
        
        # Add the issue to the project board
        curl --request POST \
          --url https://api.github.com/graphql \
          -H "Authorization: bearer $GITHUB_TOKEN" \
          --data "{\"query\":\"mutation {addProjectV2ItemById(input: {projectId: \\\"$PROJECT_ID\\\" contentId: \\\"$NODE_ID_RESULTS\\\"}) {item {id}}}\"}"

        echo "Issue #$ISSUE_NUMBER with Node ID $NODE_ID_RESULTS added to $PROJECT_NAME for user $USER."


